Description: Translate FFmpeg calls to Libav-compatible calls
 The upstream developers compile Karlyriceditor against FFmpeg, but in Debian
 there is only Libav available, whose API is slowly drifting away from
 FFmpeg's. This patch adapts the code to several of those differences:
 * The second parameters of "avformat_new_stream" is of non-const pointer
   type, but the code tries to pass a const pointer to it.
 * There is no AV_ROUND_PASS_MINMAX flag for the rounding parameter of
   av_rescale_q_rnd in Libav.
 * The member r_frame_rate is no longer present in AVStream. The recommended
   replacement is avg_frame_rate.
 * The enums CODEC_ID_MP3 and CODEC_ID_AC3 have been prefixed with AV_.
Author: Martin Stegh√∂fer <martin@steghoefer.eu>
Forwarded: not-needed

--- a/src/ffmpegvideoencoder.cpp
+++ b/src/ffmpegvideoencoder.cpp
@@ -383,7 +383,11 @@
 	}
 
 	// Create the video stream, index
-	videoStream = avformat_new_stream( outputFormatCtx, videoCodecCtx->codec );
+	// Use a block to keep the helper variable "codec" local to avoid conflict with gotos
+	{
+	    AVCodec codec = *videoCodecCtx->codec;
+	    videoStream = avformat_new_stream( outputFormatCtx, &codec );
+	}
 
 	if ( !videoStream )
 	{
@@ -425,10 +429,10 @@
 			// We're copying the stream
 			memcpy( newCtx, m_aplayer->aCodecCtx, sizeof(AVCodecContext) );
 
-			if ( newCtx->block_align == 1 && newCtx->codec_id == CODEC_ID_MP3 )
+			if ( newCtx->block_align == 1 && newCtx->codec_id == AV_CODEC_ID_MP3 )
 				newCtx->block_align= 0;
 
-			if ( newCtx->codec_id == CODEC_ID_AC3 )
+			if ( newCtx->codec_id == AV_CODEC_ID_AC3 )
 				newCtx->block_align= 0;
 		}
 		else
@@ -443,7 +447,7 @@
 			}
 
 			// Hack to use the fixed AC3 codec if available
-			if ( audioCodec->id == CODEC_ID_AC3 && avcodec_find_encoder_by_name( "ac3_fixed" ) )
+			if ( audioCodec->id == AV_CODEC_ID_AC3 && avcodec_find_encoder_by_name( "ac3_fixed" ) )
 				audioCodec = avcodec_find_encoder_by_name( "ac3_fixed" );
 
 			// Allocate the audio context
@@ -573,10 +577,10 @@
 				goto cleanup;
 			}
 
-			if ( audioStream->codec->block_align == 1 && audioStream->codec->codec_id == CODEC_ID_MP3 )
+			if ( audioStream->codec->block_align == 1 && audioStream->codec->codec_id == AV_CODEC_ID_MP3 )
 				audioStream->codec->block_align= 0;
 
-			if ( audioStream->codec->codec_id == CODEC_ID_AC3 )
+			if ( audioStream->codec->codec_id == AV_CODEC_ID_AC3 )
 				audioStream->codec->block_align= 0;
 		}
 
@@ -753,8 +757,12 @@
 					pkt.flags |= AV_PKT_FLAG_KEY;
 
 					// Rescale output packet timestamp values from codec to stream timebase
-					pkt.pts = av_rescale_q_rnd( pkt.pts, audioCodecCtx->time_base, audioStream->time_base, (AVRounding) (AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX) );
-					pkt.dts = av_rescale_q_rnd( pkt.dts, audioCodecCtx->time_base, audioStream->time_base, (AVRounding) (AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX) );
+					if ( pkt.pts != AV_NOPTS_VALUE ) {
+					    pkt.pts = av_rescale_q_rnd( pkt.pts, audioCodecCtx->time_base, audioStream->time_base, AV_ROUND_NEAR_INF );
+					}
+					if ( pkt.dts != AV_NOPTS_VALUE ) {
+					    pkt.dts = av_rescale_q_rnd( pkt.dts, audioCodecCtx->time_base, audioStream->time_base, AV_ROUND_NEAR_INF );
+					}
 					pkt.duration = av_rescale_q( pkt.duration, audioCodecCtx->time_base, audioStream->time_base);
 
 					// And write the file
--- a/src/ffmpegvideodecoder.cpp
+++ b/src/ffmpegvideodecoder.cpp
@@ -113,8 +113,8 @@
 	if ( d->videoStream == -1 )
 		return false; // Didn't find a video stream
 
-	d->m_fps_den = d->pFormatCtx->streams[d->videoStream]->r_frame_rate.den;
-	d->m_fps_num = d->pFormatCtx->streams[d->videoStream]->r_frame_rate.num;
+	d->m_fps_den = d->pFormatCtx->streams[d->videoStream]->avg_frame_rate.den;
+	d->m_fps_num = d->pFormatCtx->streams[d->videoStream]->avg_frame_rate.num;
 
 	if ( d->m_fps_den == 60000 )
 		d->m_fps_den = 30000;
